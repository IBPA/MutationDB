setwd("/media/wxk/My Passport/2_ML clean/src/helper/libs")
ML_method = "SVM"
# source("../../setpath.R")
# source("compute_AUC.R")
library(e1071)
library(ROCR)
df = read.csv(file.path(out_data_path,"MLDB.csv"))
ML_method = "SVM"
source("../../setpath.R")
source("compute_AUC.R")
library(e1071)
library(ROCR)
df = read.csv(file.path(out_data_path,"MLDB.csv"))
setwd("/media/wxk/My Passport/2_ML clean/src/helper/libs")
ML_method = "SVM"
source("../../setpath.R")
source("compute_AUC.R")
library(e1071)
library(ROCR)
df = read.csv(file.path(out_data_path,"MLDB.csv"))
ML_method = "SVM"
source("../../setpath.R")
source("compute_AUC.R")
library(e1071)
library(ROCR)
df = read.csv(file.path(out_data_path,"MLDB.csv"))
data=df[,1:85]
colnames(data)[85] = "gene"
data[] <- lapply(data, factor)
ML_method = "SVM"
score = as.numeric()
pp = ncol(data)
n= nrow(data)
i =1
train = data[-c(i),]
test = data[c(i),]
pp
train[,pp]
train[,pp]==1
which(train[,pp]==1)
merge = rbind(train,train)
dim(merge)
#inputs:
#    data: a data.frame storing all the columns
# hypers for SVM and neural network. hypers is a vector
# outputs:
#   the performance improvement:
cross_validation = function(data,ML_method,hypers,positive_ratio=0.3)
{
score = as.numeric()
pp = ncol(data)
n= nrow(data)
i =1
for (i in seq(1,nrow(data),1))
{
train = data[-c(i),]
test = data[c(i),]
positive_index = which(train[,pp]==1)
count = length(positive_index)
total = nrow(train)
while(count < total/positive_ratio) {
train = rbind(train,train[positive_index,])
count = length(positive_index)
total = nrow(train)
}
if (ML_method=="SVM") {
model = svm(gene~.,data=train,kernel="radial",cost = hypers[1],
gamma = hypers[2],probability = TRUE, type = "C")
score[c(i)] = attr(predict(model,test[,-pp],probability = TRUE),"probabilities")[,'1']    #decision.values = TRUE
}
if (ML_method=="NB") {
model = naiveBayes(gene ~ ., train)
score[c(i)] = predict(model,test[,-pp],type='raw')[,2]
}
}
perf = compute_AUC(score,data[,pp])
res = list("perf" = perf,"score" = score)
return(res)
}
res = cross_validation(data,"SVM",c(5,50))
setwd("/media/wxk/My Passport/2_ML clean/src/helper/libs")
#inputs:
#    data: a data.frame storing all the columns
# hypers for SVM and neural network. hypers is a vector
# outputs:
#   the performance improvement:
cross_validation = function(data,ML_method,hypers,positive_ratio=0.3)
{
score = as.numeric()
pp = ncol(data)
n= nrow(data)
i =1
for (i in seq(1,nrow(data),1))
{
train = data[-c(i),]
test = data[c(i),]
positive_index = which(train[,pp]==1)
count = length(positive_index)
total = nrow(train)
while(count < total/positive_ratio) {
train = rbind(train,train[positive_index,])
count = length(positive_index)
total = nrow(train)
}
cat("train dim", dim(train))
if (ML_method=="SVM") {
model = svm(gene~.,data=train,kernel="radial",cost = hypers[1],
gamma = hypers[2],probability = TRUE, type = "C")
score[c(i)] = attr(predict(model,test[,-pp],probability = TRUE),"probabilities")[,'1']    #decision.values = TRUE
}
if (ML_method=="NB") {
model = naiveBayes(gene ~ ., train)
score[c(i)] = predict(model,test[,-pp],type='raw')[,2]
}
}
perf = compute_AUC(score,data[,pp])
res = list("perf" = perf,"score" = score)
return(res)
}
if(interactive()) {
ML_method = "SVM"
source("../../setpath.R")
source("compute_AUC.R")
library(e1071)
library(ROCR)
df = read.csv(file.path(out_data_path,"MLDB.csv"))
data=df[,1:85]
colnames(data)[85] = "gene"
data[] <- lapply(data, factor)
ML_method = "SVM"
res = cross_validation(data,"SVM",c(5,50))
# cat(res[["perf"]])
}
#inputs:
#    data: a data.frame storing all the columns
# hypers for SVM and neural network. hypers is a vector
# outputs:
#   the performance improvement:
cross_validation = function(data,ML_method,hypers,positive_ratio=0.3)
{
score = as.numeric()
pp = ncol(data)
n= nrow(data)
i =1
for (i in seq(1,nrow(data),1))
{
train = data[-c(i),]
test = data[c(i),]
positive_index = which(train[,pp]==1)
count = length(positive_index)
total = nrow(train)
while(count < total/positive_ratio) {
train = rbind(train,train[positive_index,])
count = length(which(train[,pp]==1))
total = nrow(train)
}
cat("train dim", dim(train))
if (ML_method=="SVM") {
model = svm(gene~.,data=train,kernel="radial",cost = hypers[1],
gamma = hypers[2],probability = TRUE, type = "C")
score[c(i)] = attr(predict(model,test[,-pp],probability = TRUE),"probabilities")[,'1']    #decision.values = TRUE
}
if (ML_method=="NB") {
model = naiveBayes(gene ~ ., train)
score[c(i)] = predict(model,test[,-pp],type='raw')[,2]
}
}
perf = compute_AUC(score,data[,pp])
res = list("perf" = perf,"score" = score)
return(res)
}
if(interactive()) {
ML_method = "SVM"
source("../../setpath.R")
source("compute_AUC.R")
library(e1071)
library(ROCR)
df = read.csv(file.path(out_data_path,"MLDB.csv"))
data=df[,1:85]
colnames(data)[85] = "gene"
data[] <- lapply(data, factor)
ML_method = "SVM"
res = cross_validation(data,"SVM",c(5,50))
# cat(res[["perf"]])
}
#inputs:
#    data: a data.frame storing all the columns
# hypers for SVM and neural network. hypers is a vector
# outputs:
#   the performance improvement:
cross_validation = function(data,ML_method,hypers,positive_ratio=0.3)
{
score = as.numeric()
pp = ncol(data)
n= nrow(data)
i =1
for (i in seq(1,nrow(data),1))
{
train = data[-c(i),]
test = data[c(i),]
positive_index = which(train[,pp]==1)
count = length(positive_index)
total = nrow(train)
while(count < total/positive_ratio) {
train = rbind(train,train[positive_index,])
count = length(which(train[,pp]==1))
total = nrow(train)
cat("train dim", dim(train))
}
if (ML_method=="SVM") {
model = svm(gene~.,data=train,kernel="radial",cost = hypers[1],
gamma = hypers[2],probability = TRUE, type = "C")
score[c(i)] = attr(predict(model,test[,-pp],probability = TRUE),"probabilities")[,'1']    #decision.values = TRUE
}
if (ML_method=="NB") {
model = naiveBayes(gene ~ ., train)
score[c(i)] = predict(model,test[,-pp],type='raw')[,2]
}
}
perf = compute_AUC(score,data[,pp])
res = list("perf" = perf,"score" = score)
return(res)
}
if(interactive()) {
ML_method = "SVM"
source("../../setpath.R")
source("compute_AUC.R")
library(e1071)
library(ROCR)
df = read.csv(file.path(out_data_path,"MLDB.csv"))
data=df[,1:85]
colnames(data)[85] = "gene"
data[] <- lapply(data, factor)
ML_method = "SVM"
res = cross_validation(data,"SVM",c(5,50))
# cat(res[["perf"]])
}
setwd("/media/wxk/My Passport/2_ML clean/src/helper/libs")
#inputs:
#    data: a data.frame storing all the columns
# hypers for SVM and neural network. hypers is a vector
# outputs:
#   the performance improvement:
cross_validation = function(data,ML_method,hypers,positive_ratio=0.3)
{
score = as.numeric()
pp = ncol(data)
n= nrow(data)
i =1
for (i in seq(1,nrow(data),1))
{
train = data[-c(i),]
test = data[c(i),]
positive_index = which(train[,pp]==1)
count = length(positive_index)
total = nrow(train)
while(count < total/positive_ratio) {
train = rbind(train,train[positive_index,])
count = length(which(train[,pp]==1))
total = nrow(train)
cat("train dim", dim(train))
}
if (ML_method=="SVM") {
model = svm(gene~.,data=train,kernel="radial",cost = hypers[1],
gamma = hypers[2],probability = TRUE, type = "C")
score[c(i)] = attr(predict(model,test[,-pp],probability = TRUE),"probabilities")[,'1']    #decision.values = TRUE
}
if (ML_method=="NB") {
model = naiveBayes(gene ~ ., train)
score[c(i)] = predict(model,test[,-pp],type='raw')[,2]
}
}
perf = compute_AUC(score,data[,pp])
res = list("perf" = perf,"score" = score)
return(res)
}
if(interactive()) {
ML_method = "SVM"
source("../../setpath.R")
source("compute_AUC.R")
library(e1071)
library(ROCR)
df = read.csv(file.path(out_data_path,"MLDB.csv"))
data=df[,1:85]
colnames(data)[85] = "gene"
data[] <- lapply(data, factor)
ML_method = "SVM"
res = cross_validation(data,"SVM",c(5,50))
# cat(res[["perf"]])
}
setwd("/media/wxk/My Passport/2_ML clean/src/helper/libs")
#inputs:
#    data: a data.frame storing all the columns
# hypers for SVM and neural network. hypers is a vector
# outputs:
#   the performance improvement:
cross_validation = function(data,ML_method,hypers,positive_ratio=0.3)
{
score = as.numeric()
pp = ncol(data)
n= nrow(data)
i =1
for (i in seq(1,nrow(data),1))
{
train = data[-c(i),]
test = data[c(i),]
positive_index = which(train[,pp]==1)
count = length(positive_index)
total = nrow(train)
cat("train dim", dim(train))
while(count < total/positive_ratio) {
train = rbind(train,train[positive_index,])
count = length(which(train[,pp]==1))
total = nrow(train)
cat("train dim", dim(train))
}
if (ML_method=="SVM") {
model = svm(gene~.,data=train,kernel="radial",cost = hypers[1],
gamma = hypers[2],probability = TRUE, type = "C")
score[c(i)] = attr(predict(model,test[,-pp],probability = TRUE),"probabilities")[,'1']    #decision.values = TRUE
}
if (ML_method=="NB") {
model = naiveBayes(gene ~ ., train)
score[c(i)] = predict(model,test[,-pp],type='raw')[,2]
}
}
perf = compute_AUC(score,data[,pp])
res = list("perf" = perf,"score" = score)
return(res)
}
if(interactive()) {
ML_method = "SVM"
source("../../setpath.R")
source("compute_AUC.R")
library(e1071)
library(ROCR)
df = read.csv(file.path(out_data_path,"MLDB.csv"))
data=df[,1:85]
colnames(data)[85] = "gene"
data[] <- lapply(data, factor)
ML_method = "SVM"
res = cross_validation(data,"SVM",c(5,50))
# cat(res[["perf"]])
}
ML_method = "SVM"
source("../../setpath.R")
source("compute_AUC.R")
library(e1071)
library(ROCR)
df = read.csv(file.path(out_data_path,"MLDB.csv"))
data=df[,1:85]
colnames(data)[85] = "gene"
data[] <- lapply(data, factor)
ML_method = "SVM"
score = as.numeric()
pp = ncol(data)
n= nrow(data)
i =1
train = data[-c(i),]
test = data[c(i),]
positive_index = which(train[,pp]==1)
count = length(positive_index)
total = nrow(train)
cat("train dim", dim(train))
while(count < total/positive_ratio) {
train = rbind(train,train[positive_index,])
count = length(which(train[,pp]==1))
total = nrow(train)
cat("train dim", dim(train))
}
positive_ratio=0.3
train = data[-c(i),]
test = data[c(i),]
positive_index = which(train[,pp]==1)
count = length(positive_index)
total = nrow(train)
cat("train dim", dim(train))
while(count < total/positive_ratio) {
train = rbind(train,train[positive_index,])
count = length(which(train[,pp]==1))
total = nrow(train)
cat("train dim", dim(train))
}
part = train[positive_index,]
dim(part)
train = rbind(train,train[positive_index,])
total/positive_ratio
train = data[-c(i),]
test = data[c(i),]
positive_index = which(train[,pp]==1)
count = length(positive_index)
total = nrow(train)
cat("train dim", dim(train))
while(count < total*positive_ratio) {
train = rbind(train,train[positive_index,])
count = length(which(train[,pp]==1))
total = nrow(train)
cat("train dim", dim(train))
}
