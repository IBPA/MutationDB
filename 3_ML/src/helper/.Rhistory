setwd("C:/Xiaokang/Prof_Ilias/Mutation_DB_clean/2_ML/src/debug_tool")
setwd("C:/Xiaokang/Prof_Ilias/Mutation_DB_clean/2_ML/src/debug_tool")
source("../setpath.R")
library(e1071)
library(ROCR)
library(nnet)
source("../helper/libs/compute_AUC.R")
source("../helper/backward_wrapper.R")
source("../helper/libs/cross_validation.R")
conditions=df[,3]
single = which(!duplicated(conditions))
num_c = length(single)
# get the index of the first mutation
mut_star= tail(grep("Pert_",colnames(df)),n=1)+1
n=dim(df)[1]
gene_id=1
time = mut_star+gene_id-1
colnames(df)[time] ="ybcS"
# conditon with one gene to predict
data = df[,c(5:mut_star-1,time)]
data[is.na(data)] = 0
hit_index = which(data[,ncol(data)] !="")
data[hit_index, ncol(data)] = "Yes"
data[-hit_index,ncol(data)] = "No"
# extract the index of unique condition
# the carbon source and supplemental columns were deleted manually
df= read.table(file.path(out_data_path,"database","DB_1992.csv"), header=TRUE,sep=",",fill=TRUE,stringsAsFactors=FALSE)
conditions=df[,3]
single = which(!duplicated(conditions))
num_c = length(single)
# get the index of the first mutation
mut_star= tail(grep("Pert_",colnames(df)),n=1)+1
n=dim(df)[1]
gene_id=1
time = mut_star+gene_id-1
colnames(df)[time] ="ybcS"
# conditon with one gene to predict
data = df[,c(5:mut_star-1,time)]
data[is.na(data)] = 0
hit_index = which(data[,ncol(data)] !="")
data[hit_index, ncol(data)] = "Yes"
data[-hit_index,ncol(data)] = "No"
perf = cross_validation(data,conditions,"ANN")
ML_method = "ANN"
if (ML_method == "NB")
{
data[data==0] = "absent"
data[data==1] = "present"
}
single = which(!duplicated(conditions))
num_c = length(single)
score = as.numeric()
pp = ncol(data)
n= nrow(data)
i =1
exclude_rows = which(conditions==conditions[single[i]])
train_rows=setdiff( c(1:n),exclude_rows)
train = data[train_rows,]
test = data[exclude_rows,]
model <- nnet(ybcS~.,data=train,size=9,decay=0.05,maxit=90,trace=T)
head(train)
model <- nnet(ybcS~.,data=train,size=9,decay=0.05,maxit=90,trace=T)
head(data)
factor(data["ybcS"])
factor(data[,"ybcS"])
integer(factor(data[,"ybcS"]))
asinteger(factor(data[,"ybcS"]))
as.integer(factor(data[,"ybcS"]))
as.integer(data[,"ybcS"])
as.integer(factor(data[,"ybcS"]))
data["ybcS"] = as.integer(factor(data[,"ybcS"]))
data["ybcS"]
exclude_rows = which(conditions==conditions[single[i]])
train_rows=setdiff( c(1:n),exclude_rows)
train = data[train_rows,]
test = data[exclude_rows,]
model <- nnet(ybcS~.,data=train,size=9,decay=0.05,maxit=90,trace=T)
source("../setpath.R")
library(e1071)
library(ROCR)
library(nnet)
source("../helper/libs/compute_AUC.R")
source("../helper/backward_wrapper.R")
source("../helper/libs/cross_validation.R")
# extract the index of unique condition
# the carbon source and supplemental columns were deleted manually
df= read.table(file.path(out_data_path,"database","DB_1992.csv"), header=TRUE,sep=",",fill=TRUE,stringsAsFactors=FALSE)
conditions=df[,3]
single = which(!duplicated(conditions))
num_c = length(single)
# get the index of the first mutation
mut_star= tail(grep("Pert_",colnames(df)),n=1)+1
n=dim(df)[1]
gene_id=1
time = mut_star+gene_id-1
colnames(df)[time] ="ybcS"
# conditon with one gene to predict
data = df[,c(5:mut_star-1,time)]
data[is.na(data)] = 0
hit_index = which(data[,ncol(data)] !="")
data[hit_index, ncol(data)] = "Yes"
data[-hit_index,ncol(data)] = "No"
perf = cross_validation(data,conditions,"ANN")
perf
exclude_index = as.numeric()
aucs = as.numeric()
for (i in 1:3)
{
index_auc = backward_wrapper(data,exclude_index, conditions,iteration=i,ML_method="NB")
exclude_index = index_auc[[1]]
aucs = c(aucs, index_auc[[2]])
}
exclude_index = as.numeric()
aucs = as.numeric()
for (i in 1:3)
{
index_auc = backward_wrapper(data,exclude_index, conditions,iteration=i,ML_method="ANN")
exclude_index = index_auc[[1]]
aucs = c(aucs, index_auc[[2]])
}
aucs
ML_method
setwd("~/DB_clean/2_ML/src/client")
source("../setpath.R")
library(e1071)
library(ROCR)
source("../helper/libs/compute_AUC.R")
source("../helper/backward_wrapper.R")
source("../helper/libs/cross_validation.R")
# args = commandArgs(TRUE)
# gene_id = as.integer(args[1])
# ML_method = args[2]
# hypers = c(as.integer(args[3]), as.integer(args[4]))
gene_id = 1
ML_method = "NB"
hypers = c(3,50)
df = read.csv(file.path(out_data_path,"MLDB.csv"))
data=df[,c(1:84,84+gene_id)]
colnames(data)[85] = "gene"
data[] <- lapply(data, factor)
res = backward_wrapper(data,ML_method,hypers)
ML_method
setwd("~/DB_clean/2_ML/src/helper")
# inputs:
#    data: a data.frame storing all the columns
#    exclude_index: exclude_index so far
#    conditions: the condition id for each row
#    iteration: i, indicating this is the ith iteration
#
# outputs:
#   updated_exclude_index: append the newly selected column index to the exclude_index
#   the performance improvement:
backward_wrapper = function(data,ML_method,hypers)
{
df = data
survive_index = seq(1,ncol(data)-1,1)
best_perf=0
best_perfs = as.numeric()
exclude_index = as.numeric()
for (i in 2:length(survive_index)-1) {
cat("excluded: ", exclude_index,"\n")
cat("best_perfs: ", best_perfs,"\n")
perfs = as.numeric()
for(index in survive_index) {
survive_index_copy = survive_index[!survive_index %in% index]
res = cross_validation(df[,c(survive_index,ncol(df))],ML_method,hypers)
perfs = c(perfs,res[["perf"]])
cat("perfs: ", perfs, "\n")
}
max_index = which.max(perfs)
current_best = max(perfs)
if (current_best > best_perf) {
best_perf = current_best
best_perfs = c(best_perfs, (best_perf))
exclude_index = c(exclude_index, (survive_index[max_index]))
survive_index = survive_index[!survive_index %in% survive_index[max_index]]
} else {
break
}
}
index_auc = list(best_perfs,exclude_index)
return(index_auc)
}
if(interactive()) {
ML_method = "NB"
hypers = c(3,50)
source("../setpath.R")
library(e1071)
library(ROCR)
df = read.csv(file.path(out_data_path,"MLDB.csv"))
data=df[,1:85]
colnames(data)[85] = "gene"
data[] <- lapply(data, factor)
source("./libs/cross_validation.R")
source("./libs/compute_AUC.R")
res = backward_wrapper(data,ML_method,hypers)
}
ML_method
# inputs:
#    data: a data.frame storing all the columns
#    exclude_index: exclude_index so far
#    conditions: the condition id for each row
#    iteration: i, indicating this is the ith iteration
#
# outputs:
#   updated_exclude_index: append the newly selected column index to the exclude_index
#   the performance improvement:
backward_wrapper = function(data,ML_method,hypers)
{
df = data
survive_index = seq(1,ncol(data)-1,1)
best_perf=0
best_perfs = as.numeric()
exclude_index = as.numeric()
for (i in 2:length(survive_index)-1) {
cat("excluded: ", exclude_index,"\n")
cat("best_perfs: ", best_perfs,"\n")
perfs = as.numeric()
for(index in survive_index) {
survive_index_copy = survive_index[!survive_index %in% index]
res = cross_validation(df[,c(survive_index,ncol(df))],ML_method,hypers)
perfs = c(perfs,res[["perf"]])
cat("perfs: ", perfs, "\n")
}
max_index = which.max(perfs)
current_best = max(perfs)
if (current_best > best_perf) {
best_perf = current_best
best_perfs = c(best_perfs, (best_perf))
exclude_index = c(exclude_index, (survive_index[max_index]))
survive_index = survive_index[!survive_index %in% survive_index[max_index]]
} else {
break
}
}
index_auc = list(best_perfs,exclude_index)
return(index_auc)
}
if(interactive()) {
ML_method = "NB"
hypers = c(3,50)
source("../setpath.R")
library(e1071)
library(ROCR)
df = read.csv(file.path(out_data_path,"MLDB.csv"))
data=df[,1:85]
colnames(data)[85] = "gene"
data[] <- lapply(data, factor)
source("./libs/cross_validation.R")
source("./libs/compute_AUC.R")
cat("ML_method: ", ML_method)
res = backward_wrapper(data,ML_method,hypers)
}
