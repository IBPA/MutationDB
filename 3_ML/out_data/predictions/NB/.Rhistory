library(nnet)
library(ROCR)
library(doParallel)
setwd("/home/minseven/taglab/XK/mutation/output")
detectCores()
cl <- makeCluster(3)
registerDoParallel(cl)
getDoParWorkers()
install.packages("bigGP")
install.packages("bigGP")
install.packages("C:/Users/wmmkx_000/Downloads/bigGP_0.1-6.tar.gz", repos = NULL, type = "source")
install.packages("rmpi")
library(Rmpi)
library("Rmpi")
install.packages("Rmpi")
library("Rmpi")
library("Rmpi")
library(Rmpi)
library(Rmpi)
library(Rmpi)
library(Rmpi)
install.packages("Rmpi")
library(Rmpi)
install.packages("MPICH2")
library(MPICH2)
install.packages("multicore")
library(multcore)
library(Rmpi)
?Rprofile
Sys.getenv()
Sys.getenv(names=R_SHARE_DIR)
Sys.getenv(names="R_SHARE_DIR")
R.home(component = "home")
library(Rmpi)
setwd("C:/Users/wmmkx_000/Dropbox/Indexed Paper/DB/stage 4 feature selection/NB")
library(ROCR)
df=read.csv("ANN_mutation.csv",header=TRUE)
ROC = list()
P_R = list()
j =1
for (j in 1:(dim(df)[2]-1))
{
trigger = file.exists(paste("score",j,".csv",sep=""))
if (trigger==FALSE){
next
}
score = read.csv(file=paste("score",j,".csv",sep=""))
actual_class <- df[,j]
pred <- prediction(score, actual_class)
name_pred = slotNames(pred)
check = slot(pred,name_pred[5])[[1]]
if (sum(check)==0){
next
}
perf <- performance(pred, "tpr", "fpr")
names = slotNames(perf)
ROC[[2*j-1]]=slot(perf,names[4])[[1]]  # False positive rate
ROC[[2*j]]=slot(perf,names[5])[[1]]    # True positive rate
P_num = length(which(actual_class==1))
N_num = length(which(actual_class==0))
library(ROCR)
df=read.csv("ANN_mutation.csv",header=TRUE)
ROC = list()
P_R = list()
j =1
for (j in 1:(dim(df)[2]-1))
{
trigger = file.exists(paste("score",j,".csv",sep=""))
if (trigger==FALSE){
next
}
score = read.csv(file=paste("score",j,".csv",sep=""))
actual_class <- df[,j]
pred <- prediction(score, actual_class)
name_pred = slotNames(pred)
check = slot(pred,name_pred[5])[[1]]
if (sum(check)==0){
next
}
perf <- performance(pred, "tpr", "fpr")
names = slotNames(perf)
ROC[[2*j-1]]=slot(perf,names[4])[[1]]  # False positive rate
ROC[[2*j]]=slot(perf,names[5])[[1]]    # True positive rate
P_num = length(which(actual_class==1))
N_num = length(which(actual_class==0))
TP_num = ROC[[2*j]]*P_num
FP_num = N_num - (1-ROC[[2*j-1]])*N_num  # how many real negative is predicted to be positive
precision = TP_num/(TP_num+FP_num)
P_R[[2*j-1]]=precision
P_R[[2*j]] =ROC[[2*j]]
}
library(ROCR)
df=read.csv("ANN_mutation.csv",header=TRUE)
ROC = list()
P_R = list()
j =1
for (j in 1:(dim(df)[2]-1))
{
trigger = file.exists(paste("score",j,".csv",sep=""))
if (trigger==FALSE){
next
}
score = read.csv(file=paste("score",j,".csv",sep=""))
actual_class <- df[,j]
pred <- prediction(score, actual_class)
name_pred = slotNames(pred)
check = slot(pred,name_pred[5])[[1]]
if (sum(check)==0){
next
}
perf <- performance(pred, "tpr", "fpr")
names = slotNames(perf)
ROC[[2*j-1]]=slot(perf,names[4])[[1]]  # False positive rate
ROC[[2*j]]=slot(perf,names[5])[[1]]    # True positive rate
P_num = length(which(actual_class==1))
N_num = length(which(actual_class==0))
TP_num = ROC[[2*j]]*P_num
FP_num = N_num - (1-ROC[[2*j-1]])*N_num  # how many real negative is predicted to be positive
precision = TP_num/(TP_num+FP_num)
P_R[[2*j-1]]=precision
P_R[[2*j]] =ROC[[2*j]]
}
num_roc = as.numeric()
Notnull = list()
Notnull_PR = list()
j = 1
for (i in 1:length(ROC))
{
if (!is.null(ROC[[i]]))
{
Notnull[[j]]=ROC[[i]]
Notnull_PR[[j]] = P_R[[i]]
j = j+1
}
}
# interpolate
inter_roc = list()
i=1
PR = Notnull_PR[[1]]
for (i in 1:(length(Notnull)/2))  #
{
x = Notnull[[2*i-1]]
y = Notnull[[2*i]]
interpolate  = approx(x,y)
png(file=paste("ROC", i, ".png",sep=""))
#plot(x,y)
dev.off()
inter_roc[[2*i-1]] = interpolate$x
inter_roc[[2*i]] = interpolate$y
}
FPR = inter_roc[[1]]
TPR = inter_roc[[2]]
for (i in 2:(length(Notnull)/2))  #
{
FPR = FPR+inter_roc[[2*i-1]]
TPR = TPR+inter_roc[[2*i]]
}
FPR = FPR/( length(Notnull)/2)
TPR = TPR/( length(Notnull)/2)
plot(FPR,TPR)
setwd("C:/Users/wmmkx_000/Dropbox/Indexed Paper/DB/stage 4 feature selection/ANN_score")
library(ROCR)
df=read.csv("ANN_mutation.csv",header=TRUE)
ROC = list()
P_R = list()
j =1
for (j in 1:(dim(df)[2]-1))
{
trigger = file.exists(paste("score",j,".csv",sep=""))
if (trigger==FALSE){
next
}
score = read.csv(file=paste("score",j,".csv",sep=""))
actual_class <- df[,j]
pred <- prediction(score, actual_class)
name_pred = slotNames(pred)
check = slot(pred,name_pred[5])[[1]]
if (sum(check)==0){
next
}
perf <- performance(pred, "tpr", "fpr")
names = slotNames(perf)
ROC[[2*j-1]]=slot(perf,names[4])[[1]]  # False positive rate
ROC[[2*j]]=slot(perf,names[5])[[1]]    # True positive rate
P_num = length(which(actual_class==1))
N_num = length(which(actual_class==0))
TP_num = ROC[[2*j]]*P_num
FP_num = N_num - (1-ROC[[2*j-1]])*N_num  # how many real negative is predicted to be positive
precision = TP_num/(TP_num+FP_num)
P_R[[2*j-1]]=precision
P_R[[2*j]] =ROC[[2*j]]
}
#save(ROC, file = "ROC.RData")
num_roc = as.numeric()
Notnull = list()
Notnull_PR = list()
j = 1
for (i in 1:length(ROC))
{
if (!is.null(ROC[[i]]))
{
Notnull[[j]]=ROC[[i]]
Notnull_PR[[j]] = P_R[[i]]
j = j+1
}
}
# interpolate
inter_roc = list()
i=1
PR = Notnull_PR[[1]]
for (i in 1:(length(Notnull)/2))  #
{
x = Notnull[[2*i-1]]
y = Notnull[[2*i]]
interpolate  = approx(x,y)
png(file=paste("ROC", i, ".png",sep=""))
#plot(x,y)
dev.off()
inter_roc[[2*i-1]] = interpolate$x
inter_roc[[2*i]] = interpolate$y
}
FPR = inter_roc[[1]]
TPR = inter_roc[[2]]
for (i in 2:(length(Notnull)/2))  #
{
FPR = FPR+inter_roc[[2*i-1]]
TPR = TPR+inter_roc[[2*i]]
}
FPR = FPR/( length(Notnull)/2)
TPR = TPR/( length(Notnull)/2)
PR = PR/( length(Notnull)/2)
#png(file=paste("ROC", ".png",sep=""))
plot(FPR,TPR)
#dev.off()
setwd("C:/Users/wmmkx_000/Dropbox/Indexed Paper/DB/stage 4 feature selection/NB")
library(ROCR)
df=read.csv("ANN_mutation.csv",header=TRUE)
ROC = list()
P_R = list()
j =1
for (j in 1:(dim(df)[2]-1))
{
trigger = file.exists(paste("score",j,".csv",sep=""))
if (trigger==FALSE){
next
}
score = read.csv(file=paste("score",j,".csv",sep=""))
actual_class <- df[,j]
pred <- prediction(score, actual_class)
name_pred = slotNames(pred)
check = slot(pred,name_pred[5])[[1]]
if (sum(check)==0){
next
}
perf <- performance(pred, "tpr", "fpr")
names = slotNames(perf)
ROC[[2*j-1]]=slot(perf,names[4])[[1]]  # False positive rate
ROC[[2*j]]=slot(perf,names[5])[[1]]    # True positive rate
P_num = length(which(actual_class==1))
N_num = length(which(actual_class==0))
TP_num = ROC[[2*j]]*P_num
FP_num = N_num - (1-ROC[[2*j-1]])*N_num  # how many real negative is predicted to be positive
precision = TP_num/(TP_num+FP_num)
P_R[[2*j-1]]=precision
P_R[[2*j]] =ROC[[2*j]]
}
#save(ROC, file = "ROC.RData")
num_roc = as.numeric()
Notnull = list()
Notnull_PR = list()
j = 1
for (i in 1:length(ROC))
{
if (!is.null(ROC[[i]]))
{
Notnull[[j]]=ROC[[i]]
Notnull_PR[[j]] = P_R[[i]]
j = j+1
}
}
# interpolate
inter_roc = list()
i=1
PR = Notnull_PR[[1]]
for (i in 1:(length(Notnull)/2))  #
{
x = Notnull[[2*i-1]]
y = Notnull[[2*i]]
interpolate  = approx(x,y)
png(file=paste("ROC", i, ".png",sep=""))
plot(x,y)
dev.off()
inter_roc[[2*i-1]] = interpolate$x
inter_roc[[2*i]] = interpolate$y
}
FPR = inter_roc[[1]]
TPR = inter_roc[[2]]
for (i in 2:(length(Notnull)/2))  #
{
FPR = FPR+inter_roc[[2*i-1]]
TPR = TPR+inter_roc[[2*i]]
}
FPR = FPR/( length(Notnull)/2)
TPR = TPR/( length(Notnull)/2)
PR = PR/( length(Notnull)/2)
#png(file=paste("ROC", ".png",sep=""))
plot(FPR,TPR)
